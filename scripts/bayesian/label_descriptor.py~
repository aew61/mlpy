# SYSTEM IMPORTS
from abc import ABCMeta, abstractmethod
import numpy


# PYTHON PROJECT IMPORTS


class label_descriptor(object):
    __metaclass__ = ABCMeta

    def __init__(self, label):
        self._label = label

    def get_label(self):
        return self._label

    @abstractmethod
    def hash(self, x):
        pass

    @abstractmethod
    def num_states(self):
        pass

    @abstractmethod
    def get_all_states(self):
        pass

    def __str__(self):
        return "%s:%s" % (self.__class__.__name__, self.get_all_states())

    def __eq__(self):
        return (other is not None and isinstance(self, other.__class__)
            and isinstance(other, self.__class__))


class continuous_label(label_descriptor):
    def __init__(self, label):
        super(label_descriptor, self).__init__(label)

    def hash(self, x):
        return x

    def num_state(self):
        return numpy.inf

    def get_all_states(self):
        return numpy.inf


class discrete_label(object):
    def __init__(self, label, states):
        super(label_descriptor, self).__init__(label)
        self._states = states

    def hash(self, x):
        if x in self._states:
            return self._states.index(x)
        else:
            return -1

class nominal_label(object):
    pass

class 

